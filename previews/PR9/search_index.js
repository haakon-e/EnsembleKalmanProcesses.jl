var documenterSearchIndex = {"docs":
[{"location":"API/Observations/#Observations","page":"Observations","title":"Observations","text":"","category":"section"},{"location":"API/Observations/","page":"Observations","title":"Observations","text":"CurrentModule = EnsembleKalmanProcesses.Observations","category":"page"},{"location":"API/Observations/","page":"Observations","title":"Observations","text":"Obs","category":"page"},{"location":"API/Observations/#EnsembleKalmanProcesses.Observations.Obs","page":"Observations","title":"EnsembleKalmanProcesses.Observations.Obs","text":"Obs{FT<:AbstractFloat}\n\nStructure that contains the observations\n\nFields\n\nsamples\nvector of observational samples, each of length sample_dim\nobs_noise_cov\ncovariance of the observational noise (assumed to be normally     distributed); sampledim x sampledim (where sampledim is the number of     elements in each sample), or a scalar if the sample dim is 1. If not     supplied, obsnoisecov is set to a diagonal matrix whose non-zero elements     are the variances of the samples, or to a scalar variance in the case of     1d samples. obsnoise_cov is set to nothing if only a single sample is     provided.\nmean\nsample mean\ndata_names\nnames of the data\n\n\n\n\n\n","category":"type"},{"location":"API/ParameterDistribution/#ParameterDistribution","page":"ParameterDistribution","title":"ParameterDistribution","text":"","category":"section"},{"location":"API/ParameterDistribution/","page":"ParameterDistribution","title":"ParameterDistribution","text":"CurrentModule = EnsembleKalmanProcesses.ParameterDistributionStorage","category":"page"},{"location":"API/ParameterDistribution/","page":"ParameterDistribution","title":"ParameterDistribution","text":"Parameterized\nSamples\nConstraint\nno_constraint\nbounded_below\nbounded_above\nbounded\nlen\nn_samples\nParameterDistribution\nget_name\nget_dimensions\nget_n_samples\nget_all_constraints\nbatch\nget_distribution\nsample_distribution\nget_logpdf\nget_cov\nget_mean\ntransform_constrained_to_unconstrained\ntransform_unconstrained_to_constrained","category":"page"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.Parameterized","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.Parameterized","text":"struct Parameterized <: ParameterDistributionType\n\nA distribution constructed from a parametrized formula (e.g Julia Distributions.jl)\n\n\n\n\n\n","category":"type"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.Samples","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.Samples","text":"struct Samples{FT<:Real} <: ParameterDistributionType\n\nA distribution comprised of only samples, stored as columns of parameters\n\n\n\n\n\n","category":"type"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.Constraint","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.Constraint","text":"struct Constraint <: ConstraintType\n\nContains two functions to map between constrained and unconstrained spaces.\n\n\n\n\n\n","category":"type"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.no_constraint","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.no_constraint","text":"function no_constraint()\n\nConstructs a Constraint with no constraints, enforced by maps x -> x and x -> x.\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.bounded_below","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.bounded_below","text":"function bounded_below(lower_bound::FT) where {FT <: Real}\n\nConstructs a Constraint with provided lower bound, enforced by maps x -> log(x - lowerbound) and x -> exp(x) + lowerbound.\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.bounded_above","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.bounded_above","text":"function bounded_above(upper_bound::FT) where {FT <: Real}\n\nConstructs a Constraint with provided upper bound, enforced by maps x -> log(upperbound - x) and x -> upperbound - exp(x).\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.bounded","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.bounded","text":"function bounded(lower_bound::FT, upper_bound::FT) where {FT <: Real}\n\nConstructs a Constraint with provided upper and lower bounds, enforced by maps x -> log((x - lowerbound) / (upperbound - x)) and x -> (upperbound * exp(x) + lowerbound) / (exp(x) + 1)\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.len","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.len","text":"function len(c::Array{CType})\n\nThe number of constraints, each constraint has length 1.\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.n_samples","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.n_samples","text":"function n_samples(d::Samples)\n\nThe number of samples in the array\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.ParameterDistribution","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.ParameterDistribution","text":"struct ParameterDistribution\n\nStructure to hold a parameter distribution, always stored as an array of distributions\n\n\n\n\n\n","category":"type"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.get_name","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.get_name","text":"function get_name(pd::ParameterDistribution)\n\nReturns a list of ParameterDistribution names\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.get_dimensions","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.get_dimensions","text":"function get_dimensions(pd::ParameterDistribution)\n\nThe number of dimensions of the parameter space\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.get_n_samples","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.get_n_samples","text":"function get_n_samples(pd::ParameterDistribution)\n\nThe number of samples in a Samples distribution\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.get_all_constraints","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.get_all_constraints","text":"function get_all_constraints(pd::ParameterDistribution)\n\nreturns the (flattened) array of constraints of the parameter distribution\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.batch","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.batch","text":"function batch(pd:ParameterDistribution)\n\nReturns a list of contiguous [collect(1:i), collect(i+1:j),... ] used to split parameter arrays by distribution dimensions\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.get_distribution","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.get_distribution","text":"function get_distribution(pd::ParameterDistribution)\n\nReturns a Dict of ParameterDistribution distributions, with the parameter names as dictionary keys. For parameters represented by Samples, the samples are returned as a 2D (parameterdimension x nsamples) array\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.sample_distribution","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.sample_distribution","text":"function sample_distribution(pd::ParameterDistribution)\n\nDraws samples from the parameter distributions returns an array, with parameters as columns\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.get_logpdf","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.get_logpdf","text":"function logpdf(pd::ParameterDistribution, xarray::Array{<:Real,1})\n\nObtains the independent logpdfs of the parameter distributions at xarray (non-Samples Distributions only), and returns their sum.\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.get_cov","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.get_cov","text":"function get_cov(pd::ParameterDistribution)\n\nreturns a blocked covariance of the distributions\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.get_mean","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.get_mean","text":"get_mean(pd::Parameterized)\n\nreturns a mean of parameterized distribution\n\n\n\n\n\nget_mean(pd::Samples)\n\nreturns a mean of the samples\n\n\n\n\n\nfunction get_mean(pd::ParameterDistribution)\n\nreturns a mean of the distirbutions\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.transform_constrained_to_unconstrained","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.transform_constrained_to_unconstrained","text":"function transform_constrained_to_unconstrained(pd::ParameterDistribution, x::Array{<:Real})\n\nApply the transformation to map (possibly constrained) parameters xarray into the unconstrained space\n\n\n\n\n\n","category":"function"},{"location":"API/ParameterDistribution/#EnsembleKalmanProcesses.ParameterDistributionStorage.transform_unconstrained_to_constrained","page":"ParameterDistribution","title":"EnsembleKalmanProcesses.ParameterDistributionStorage.transform_unconstrained_to_constrained","text":"function transform_unconstrained_to_constrained(pd::ParameterDistribution, xarray::Array{Real})\n\nApply the transformation to map parameters xarray from the unconstrained space into (possibly constrained) space\n\n\n\n\n\n","category":"function"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcessModule","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcessModule","text":"","category":"section"},{"location":"API/EnsembleKalmanProcess/","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcess","text":"CurrentModule = EnsembleKalmanProcesses.EnsembleKalmanProcessModule","category":"page"},{"location":"API/EnsembleKalmanProcess/","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcess","text":"Inversion\nSampler\nEnsembleKalmanProcess\nget_u\nget_g\nget_u_final\nget_N_iterations\nconstruct_initial_ensemble\nfind_ekp_stepsize\nupdate_ensemble!","category":"page"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcesses.EnsembleKalmanProcessModule.Inversion","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcesses.EnsembleKalmanProcessModule.Inversion","text":"Inversion <: Process\n\nAn ensemble Kalman Inversion process\n\n\n\n\n\n","category":"type"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcesses.EnsembleKalmanProcessModule.Sampler","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcesses.EnsembleKalmanProcessModule.Sampler","text":"Sampler{FT<:AbstractFloat,IT<:Int} <: Process\n\nAn ensemble Kalman Sampler process\n\n\n\n\n\n","category":"type"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcesses.EnsembleKalmanProcessModule.EnsembleKalmanProcess","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcesses.EnsembleKalmanProcessModule.EnsembleKalmanProcess","text":"EnsembleKalmanProcess{FT<:AbstractFloat, IT<:Int}\n\nStructure that is used in Ensemble Kalman processes\n\n#Fields\n\nu\nArray of stores for parameters (u), each of size [parameterdim × Nens]\nobs_mean\nvector of the observed vector size [data_dim]\nobs_noise_cov\ncovariance matrix of the observational noise, of size [datadim × datadim]\nN_ens\nensemble size\ng\nArray of stores for forward model outputs, each of size  [datadim × Nens]\nerr\nvector of errors\nΔt\nvector of timesteps used in each EK iteration\nprocess\nthe particular EK process (Inversion or Sampler)\n\n\n\n\n\n","category":"type"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcesses.EnsembleKalmanProcessModule.get_u","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcesses.EnsembleKalmanProcessModule.get_u","text":"get_u(ekp::EnsembleKalmanProcess, iteration::IT; return_array=true) where {IT <: Integer}\n\nGet for the EKI iteration. Returns a DataContainer object unless array is specified.\n\n\n\n\n\nget_u(ekp::EnsembleKalmanProcess; return_array=true)\n\nGet for the EKI iteration. Returns a DataContainer object unless array is specified.\n\n\n\n\n\n","category":"function"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcesses.EnsembleKalmanProcessModule.get_g","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcesses.EnsembleKalmanProcessModule.get_g","text":"get_g(ekp::EnsembleKalmanProcess, iteration::IT; return_array=true) where {IT <: Integer}\n\nGet for the EKI iteration. Returns a DataContainer object unless array is specified.\n\n\n\n\n\nget_g(ekp::EnsembleKalmanProcess; return_array=true)\n\nGet for the EKI iteration. Returns a DataContainer object unless array is specified.\n\n\n\n\n\n","category":"function"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcesses.EnsembleKalmanProcessModule.get_u_final","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcesses.EnsembleKalmanProcessModule.get_u_final","text":"get_u_final(ekp::EnsembleKalmanProcess, return_array=true)\n\nGet the final or prior iteration of parameters or model ouputs, returns a DataContainer Object if return_array is false.\n\n\n\n\n\n","category":"function"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcesses.EnsembleKalmanProcessModule.get_N_iterations","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcesses.EnsembleKalmanProcessModule.get_N_iterations","text":"get_N_iterations(ekp::EnsembleKalmanProcess\n\nget number of times update has been called (equals size(g), or size(u)-1) \n\n\n\n\n\n","category":"function"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcesses.EnsembleKalmanProcessModule.construct_initial_ensemble","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcesses.EnsembleKalmanProcessModule.construct_initial_ensemble","text":"construct_initial_ensemble(prior::ParameterDistribution, N_ens::IT; rng_seed=42) where {IT<:Int}\n\nConstruct the initial parameters, by sampling N_ens samples from specified prior distribution. Returned with parameters as columns\n\n\n\n\n\n","category":"function"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcesses.EnsembleKalmanProcessModule.find_ekp_stepsize","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcesses.EnsembleKalmanProcessModule.find_ekp_stepsize","text":"findekpstepsize(ekp::EnsembleKalmanProcess{FT, IT, Inversion}, g::Array{FT, 2}; cov_threshold::FT=0.01) where {FT}\n\nFind largest stepsize for the EK solver that leads to a reduction of the determinant of the sample covariance matrix no greater than cov_threshold. \n\n\n\n\n\n","category":"function"},{"location":"API/EnsembleKalmanProcess/#EnsembleKalmanProcesses.EnsembleKalmanProcessModule.update_ensemble!","page":"EnsembleKalmanProcess","title":"EnsembleKalmanProcesses.EnsembleKalmanProcessModule.update_ensemble!","text":"update_ensemble!(ekp::EnsembleKalmanProcess{FT, IT, <:Process}, g_in::Array{FT,2} cov_threshold::FT=0.01, Δt_new=nothing) where {FT, IT}\n\nUpdates the ensemble according to which type of Process we have. Model outputs gin need to be a outputdim × n_samples array (i.e data are columms)\n\n\n\n\n\n","category":"function"},{"location":"API/EnsembleKalmanProcesses/#EnsembleKalmanProcesses","page":"EnsembleKalmanProcesses","title":"EnsembleKalmanProcesses","text":"","category":"section"},{"location":"API/EnsembleKalmanProcesses/","page":"EnsembleKalmanProcesses","title":"EnsembleKalmanProcesses","text":"CurrentModule = EnsembleKalmanProcesses","category":"page"},{"location":"API/EnsembleKalmanProcesses/","page":"EnsembleKalmanProcesses","title":"EnsembleKalmanProcesses","text":"","category":"page"},{"location":"#Hello","page":"Home","title":"Hello","text":"","category":"section"},{"location":"API/DataStorage/#DataStorage","page":"DataStorage","title":"DataStorage","text":"","category":"section"},{"location":"API/DataStorage/","page":"DataStorage","title":"DataStorage","text":"CurrentModule = EnsembleKalmanProcesses.DataStorage","category":"page"},{"location":"API/DataStorage/","page":"DataStorage","title":"DataStorage","text":"DataContainer\nPairedDataContainer\nsize","category":"page"},{"location":"API/DataStorage/#EnsembleKalmanProcesses.DataStorage.DataContainer","page":"DataStorage","title":"EnsembleKalmanProcesses.DataStorage.DataContainer","text":"struct DataContainer{FT <: Real}\n\nstruct to store data samples as columns in an array\n\n\n\n\n\n","category":"type"},{"location":"API/DataStorage/#EnsembleKalmanProcesses.DataStorage.PairedDataContainer","page":"DataStorage","title":"EnsembleKalmanProcesses.DataStorage.PairedDataContainer","text":"PairedDataContainer{FT <: Real}\n\nstores input - output pairs as data containers, there must be an equal number of inputs and outputs\n\n\n\n\n\n","category":"type"},{"location":"API/DataStorage/#Base.size","page":"DataStorage","title":"Base.size","text":"size(dc::DataContainer,idx::IT) where {IT <: Integer}\n\nreturns the size of the stored data (if idx provided, it returns the size along dimension idx) \n\n\n\n\n\nsize(pdc::PairedDataContainer,idx::IT) where {IT <: Integer}\n\nreturns the sizes of the inputs and ouputs along dimension idx (if provided)\n\n\n\n\n\n","category":"function"},{"location":"installation_instructions/#Installation","page":"Installation instructions","title":"Installation","text":"","category":"section"}]
}
